# include "stm32f4xx.h"
#include <stdio.h>
#define SYS_FREQ				16000000//16mhz//
#define APB1_CLK				SYS_FREQ //default is div by1//
#define UART_BAUDRATE 		115200
#define  GPIOAEN 				(1U<<0)
#define UART2EN 					(1U<<17)
#define CR1_TE						(1U<<3)
#define CR1_UE						(1U<<13)
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate);
static uint16_t compute_uart_div(uint32_t PeriphClk,uint32_t BaudRate);
int main(void)
{

}
void uar2_tx_init(void){
	RCC->AHB1ENR |= GPIOAEN; //enable clock access//
	GPIOA->MODER &=~(1U<<4);//changing alternate fn value//
	GPIOA->MODER &=~(1U<<5);//changing alternate fn value//
	//Set PA2 alternate fn type to uart_tx//
	GPIOA->AFR[0] |= (1U<<8);
	GPIOA->AFR[0] |= (1U<<9);
	GPIOA->AFR[0] |= (1U<<10);
	GPIOA->AFR[0] &=~ (1U<<11);
	//enable clock access to uart2//
	RCC->APB1ENR |= UART2EN;

	//Config baudrate//
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
	//enable tx register//
	USART2->CR = CR1_TE;

	//enable uart module//
	USART2->CR |= CR1_UE; //didn't overwrite the enable tx value so used or//
}

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate){
USARTx->BRR =compute_uart_bd(PeriPhClk,BaudRate);
}
static uint16_t compute_uart_div(uint32_t PeriphClk,uint32_t BaudRate){
	return 	(PeriphClk+(BaudRate/2U)/BaudRate);
}







